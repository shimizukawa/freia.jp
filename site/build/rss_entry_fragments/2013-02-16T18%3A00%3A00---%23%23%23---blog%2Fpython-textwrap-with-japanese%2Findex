(dp0
S'pubdate'
p1
cdatetime
datetime
p2
(S'\x07\xdd\x02\x10\x12\x00\x00\x00\x00\x00'
p3
tp4
Rp5
sS'link'
p6
Vhttp://www.freia.jp/taka/blog/python-textwrap-with-japanese/index.html
p7
sS'description'
p8
V<div id=pythontextwrap-wrap class=section>\u000a<h1>2013/02/16 Python\u306etextwrap.wrap()\u304c\u65e5\u672c\u8a9e\u3067\u5d29\u308c\u308b\u554f\u984c<a class=headerlink href=http://www.freia.jp/taka/blog/python-textwrap-with-japanese/index.html#pythontextwrap-wrap title=\u3053\u306e\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3078\u306e\u30d1\u30fc\u30de\u30ea\u30f3\u30af>¶</a></h1>\u000a<p><a class="reference external" href=http://docs.python.jp/2/library/textwrap.html#textwrap.wrap title="(in Python v2.7)"><tt class="xref py py-func docutils literal"><span class=pre>textwrap.wrap()</span></tt></a> \u3092\u4f7f\u3046\u3068\u30c6\u30ad\u30b9\u30c8\u3092\u4f8b\u3048\u307070\u6587\u5b57\u3067\u6298\u308a\u8fd4\u3057\u3066\u6574\u5f62\u000a\u3059\u308b\u3068\u3044\u3063\u305f\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\u3057\u304b\u3057\u3053\u3044\u3064\u306f <strong>\u6587\u5b57\u6570</strong> \u3067\u6298\u308a\u8fd4\u3057\u3059\u308b\u306e\u3067\u3001\u000a\u65e5\u672c\u8a9e\u306a\u3069\u306e\u5168\u89d2\u5e45(fullwidth)\u306a\u6587\u5b57\u3092\u4e0e\u3048\u308b\u3068\u5e45\u304c\u305c\u3093\u305c\u3093\u63c3\u308f\u306a\u304f\u3066\u000a\u6b8b\u5ff5\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002</p>\u000a<p>Sphinx\u306e <strong class=command>make text</strong> \u3067\u3082\u5185\u90e8\u3067 <a class="reference external" href=http://docs.python.jp/2/library/textwrap.html#module-textwrap title="(in Python v2.7)"><tt class="xref py py-mod docutils literal"><span class=pre>textwrap</span></tt></a> \u306e\u5b9f\u88c5\u3092\u000a\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u554f\u984c\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p>\u000a<p>Sphinx-1.1.3\u3067Sphinx\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092 <strong class=command>make text</strong> \u3059\u308b\u3068\u82f1\u8a9e\u306e\u5834\u5408\u306f\u000a\u554f\u984c\u7121\u304f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6574\u5f62\u3055\u308c\u307e\u3059\u3002</p>\u000a<div class=highlight-rst><div class=highlight><pre><span class=gh>reStructuredText Primer</span>\u000a<span class=gh>***********************</span>\u000a\u000aThis section is a brief introduction to reStructuredText (reST)\u000aconcepts and syntax, intended to provide authors with enough\u000ainformation to author documents productively.  Since reST was designed\u000ato be a simple, unobtrusive markup language, this will not take too\u000along.\u000a\u000aSee also:\u000a\u000a   The authoritative reStructuredText User Documentation.  The "ref"\u000a   links in this document link to the description of the individual\u000a   constructs in the reST reference.\u000a\u000a\u000a<span class=gh>Paragraphs</span>\u000a<span class=gh>==========</span>\u000a\u000aThe paragraph (&gt;&gt;<span class=na>:duref:</span><span class=nv>`ref &lt;paragraphs&gt;`</span>&lt;&lt;) is the most basic block\u000ain a reST document.  Paragraphs are simply chunks of text separated by\u000aone or more blank lines.  As in Python, indentation is significant in\u000areST, so all lines of the same paragraph must be left-aligned to the\u000asame level of indentation.\u000a</pre></div>\u000a</div>\u000a<p>\u82f1\u8a9e\u306e\u5834\u5408\u306f\u5358\u8a9e\u306e\u533a\u5207\u308a\u3067\u6539\u884c\u3059\u308b\u306a\u3069\u306e\u8abf\u6574\u3082\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u000a\u591a\u5c11\u5e45\u304c\u30ac\u30bf\u3064\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u307e\u3042\u7dba\u9e97\u306b\u63c3\u3063\u3066\u3044\u307e\u3059\u3002</p>\u000a<p>\u3057\u304b\u3057\u65e5\u672c\u8a9e\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002</p>\u000a<div class=highlight-text><div class=highlight><pre>reStructuredText\u5165\u9580\u000a******************\u000a\u000a\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u3001reStructuredText(reST)\u306e\u8003\u3048\u65b9\u3084\u6587\u6cd5\u306b\u3064\u3044\u3066\u306e\u77ed\u3044\u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002Sphinx\u30e6\u30fc\u30b6\u304c\u30c9\u30ad\u30e5\u000a\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u5341\u5206\u306a\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002reST\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u8a2d\u8a08\u3055\u308c\u305f\u3001\u63a7\u3048\u3081\u306a\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u8a00\u8a9e\u3067\u3059\u306e\u3067\u3001\u7406\u89e3\u3059\u308b\u306e\u306b\u305d\u308c\u307b\u3069\u6642\u9593\u306f\u304b\u000a\u304b\u3089\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u000a\u000aSee also:\u000a\u000a   \u672c\u5bb6 reStructuredText\u30e6\u30fc\u30b6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u000a   \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4e2d\u306e\u53c2\u7167\u30ea\u30f3\u30af\u306f\u3001reST\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u500b\u3005\u306e\u8981\u7d20\u306e\u8aac\u660e\u306b\u30ea\u30f3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\u000a\u000a\u000a\u6bb5\u843d(\u30d1\u30e9\u30b0\u30e9\u30d5)\u000a=========\u000a\u000a\u6bb5\u843d(&gt;&gt;:duref:`ref &lt;paragraphs&gt;`&lt;&lt;)\u306freST\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308b\u3001\u3082\u3063\u3068\u3082\u57fa\u672c\u7684\u306a\u8981\u7d20\u3067\u3059\u3002\u6bb5\u843d\u306f1\u884c\u4ee5\u4e0a\u306e\u000a\u7a7a\u884c\u3067\u533a\u5207\u3089\u308c\u305f\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u30c6\u30ad\u30b9\u30c8\u306e\u56fa\u307e\u308a\u3067\u3059\u3002 Python\u306b\u304a\u3044\u3066\u30a4\u30f3\u30c7\u30f3\u30c8\u304c\u91cd\u8981\u306a\u610f\u5473\u3092\u6301\u3064\u306e\u3068\u540c\u69d8\u3001reST\u3067\u3082\u30a4\u30f3\u30c7\u30f3\u30c8\u306f\u91cd\u8981\u3067\u000a\u3059\u3002\u540c\u3058\u6bb5\u843d\u306e\u3059\u3079\u3066\u306e\u884c\u306f\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u3092\u540c\u3058\u9ad8\u3055\u306b\u305d\u308d\u3048\u3066\u3001\u5de6\u63c3\u3048\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u000a</pre></div>\u000a</div>\u000a<p>\u6570\u3048\u3066\u307f\u308b\u3068\u3001\u534a\u89d2\u5168\u89d2\u95a2\u4fc2\u306a\u304f\u6587\u5b57\u6570\u306770\u6587\u5b57\u3067\u6539\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u000a\u30bf\u30a4\u30c8\u30eb\u306e\u6b21\u306e\u884c\u306e <tt class="docutils literal"><span class=pre>=</span></tt> \u6587\u5b57\u3082\u30bf\u30a4\u30c8\u30eb\u306e\u9577\u3055\u306b\u5408\u3063\u3066\u6b32\u3057\u3044\u3068\u3053\u308d\u000a\u3067\u3059\u304c\u3001\u6587\u5b57\u6570\u306f\u5408\u3063\u3066\u3066\u3082\u5e45\u306f\u5408\u3063\u3066\u307e\u305b\u3093\u306d\u3002</p>\u000a<p>\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u82f1\u5358\u8a9e\u3082\u7a7a\u767d\u7121\u3057\u3067\u65e5\u672c\u8a9e\u6587\u5b57\u3068\u9023\u7d9a\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u000a\u5358\u8a9e\u306e\u9014\u4e2d\u3067\u3082\u5f37\u5236\u7684\u306b\u6539\u884c\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3072\u3069\u3044\u3002</p>\u000a<p>\u3053\u308c\u3060\u3068\u8272\u3005\u60b2\u3057\u3044\u306e\u3067\u3001python\u672c\u4f53\u306e <a class="reference external" href=http://docs.python.jp/2/library/textwrap.html#textwrap.TextWrapper title="(in Python v2.7)"><tt class="xref py py-class docutils literal"><span class=pre>textwrap.TextWrapper</span></tt></a>\u000a\u3092\u7d99\u627f\u3057\u3066\u3001\u591a\u5c11\u4fee\u6b63\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002</p>\u000a<div class=highlight-text><div class=highlight><pre>reStructuredText\u5165\u9580\u000a********************\u000a\u000a\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u3001reStructuredText(reST)\u306e\u8003\u3048\u65b9\u3084\u6587\u6cd5\u306b\u3064\u3044\u3066\u306e\u77ed\u3044\u30a4\u000a\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002Sphinx\u30e6\u30fc\u30b6\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u5341\u5206\u306a\u000a\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002reST\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u8a2d\u8a08\u3055\u308c\u305f\u3001\u63a7\u3048\u3081\u306a\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u8a00\u8a9e\u000a\u3067\u3059\u306e\u3067\u3001\u7406\u89e3\u3059\u308b\u306e\u306b\u305d\u308c\u307b\u3069\u6642\u9593\u306f\u304b\u304b\u3089\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u000a\u000aSee also:\u000a\u000a  \u672c\u5bb6 reStructuredText\u30e6\u30fc\u30b6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4e2d\u306e\u53c2\u7167\u30ea\u30f3\u000a  \u30af\u306f\u3001reST\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u500b\u3005\u306e\u8981\u7d20\u306e\u8aac\u660e\u306b\u30ea\u30f3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\u000a\u000a\u000a\u6bb5\u843d(\u30d1\u30e9\u30b0\u30e9\u30d5)\u000a================\u000a\u000a\u6bb5\u843d(&gt;&gt;:duref:`ref &lt;paragraphs&gt;`&lt;&lt;)\u306freST\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308b\u3001\u3082\u3063\u3068\u000a\u3082\u57fa\u672c\u7684\u306a\u8981\u7d20\u3067\u3059\u3002\u6bb5\u843d\u306f1\u884c\u4ee5\u4e0a\u306e\u7a7a\u884c\u3067\u533a\u5207\u3089\u308c\u305f\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u30c6\u30ad\u30b9\u000a\u30c8\u306e\u56fa\u307e\u308a\u3067\u3059\u3002 Python\u306b\u304a\u3044\u3066\u30a4\u30f3\u30c7\u30f3\u30c8\u304c\u91cd\u8981\u306a\u610f\u5473\u3092\u6301\u3064\u306e\u3068\u540c\u69d8\u3001\u000areST\u3067\u3082\u30a4\u30f3\u30c7\u30f3\u30c8\u306f\u91cd\u8981\u3067\u3059\u3002\u540c\u3058\u6bb5\u843d\u306e\u3059\u3079\u3066\u306e\u884c\u306f\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u3092\u540c\u3058\u000a\u9ad8\u3055\u306b\u305d\u308d\u3048\u3066\u3001\u5de6\u63c3\u3048\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u000a</pre></div>\u000a</div>\u000a<p>\u30ad\u30ec\u30a4\u3002</p>\u000a<p>\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u304c\u62e1\u5f35\u3057\u305fTextWrapper\u306e\u5168\u30b3\u30fc\u30c9\u3067\u3059\u3002</p>\u000a<p>\u30dd\u30a4\u30f3\u30c8\u306f\u3001 <tt class="docutils literal"><span class=pre>_split()</span></tt> \u95a2\u6570\u3068 <tt class="docutils literal"><span class=pre>len()</span></tt> \u3092\u4f7f\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u5dee\u3057\u66ff\u3048\u3067\u3059\u3002\u000a<tt class="docutils literal"><span class=pre>_split()</span></tt> \u306f\u5143\u306e\u5b9f\u88c5\u3067\u306f\u7a7a\u767d\u7b49\u3067\u6587\u5b57\u5217\u3092\u5206\u5272\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u000a\u5168\u89d2\u6587\u5b57\u306e\u5834\u5408\u306f1\u6587\u5b57\u305a\u3064\u5168\u90e8\u5206\u5272\u3057\u307e\u3057\u305f\u3002 <tt class="docutils literal"><span class=pre>len()</span></tt> \u306f\u6587\u5b57\u6570\u3067\u306f\u306a\u304f\u000a\u5e45\u3092\u8fd4\u3059\u95a2\u6570\u306b\u5dee\u3057\u66ff\u3048\u307e\u3057\u305f\u3002\u3053\u306e2\u3064\u306b\u3088\u3063\u3066\u3001\u000a\u3046\u307e\u304f70\u6841\u5e45\u3067\u305d\u308d\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p>\u000a<div class=highlight-python><div class=highlight><pre><span class=c># -*- coding: utf-8 -*-</span>\u000a<span class=kn>import</span> <span class=nn>sys</span>\u000a<span class=kn>import</span> <span class=nn>textwrap</span>\u000a<span class=kn>import</span> <span class=nn>unicodedata</span>\u000a<span class=kn>from</span> <span class=nn>itertools</span> <span class=kn>import</span> <span class=n>groupby</span>\u000a\u000a<span class=c>#copy from docutils</span>\u000a<span class=n>east_asian_widths</span> <span class=o>=</span> <span class=p>{</span><span class=s>'W'</span><span class=p>:</span> <span class=mi>2</span><span class=p>,</span>   <span class=c># Wide</span>\u000a                     <span class=s>'F'</span><span class=p>:</span> <span class=mi>2</span><span class=p>,</span>   <span class=c># Full-width (wide)</span>\u000a                     <span class=s>'Na'</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span>  <span class=c># Narrow</span>\u000a                     <span class=s>'H'</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span>   <span class=c># Half-width (narrow)</span>\u000a                     <span class=s>'N'</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span>   <span class=c># Neutral (not East Asian, treated as narrow)</span>\u000a                     <span class=s>'A'</span><span class=p>:</span> <span class=mi>1</span><span class=p>}</span>   <span class=c># Ambiguous (s/b wide in East Asian context,</span>\u000a                               <span class=c># narrow otherwise, but that doesn't work)</span>\u000a\u000a<span class=c>#copy from docutils</span>\u000a<span class=k>def</span> <span class=nf>column_width</span><span class=p>(</span><span class=n>text</span><span class=p>):</span>\u000a    <span class=sd>"""Return the column width of text.</span>\u000a\u000a<span class=sd>    Correct ``len(text)`` for wide East Asian and combining Unicode chars.</span>\u000a<span class=sd>    """</span>\u000a    <span class=k>if</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>text</span><span class=p>,</span> <span class=nb>str</span><span class=p>)</span> <span class=ow>and</span> <span class=n>sys</span><span class=o>.</span><span class=n>version_info</span> <span class=o>&lt;</span> <span class=p>(</span><span class=mi>3</span><span class=p>,</span><span class=mi>0</span><span class=p>):</span>\u000a        <span class=k>return</span> <span class=nb>len</span><span class=p>(</span><span class=n>text</span><span class=p>)</span>\u000a    <span class=n>combining_correction</span> <span class=o>=</span> <span class=nb>sum</span><span class=p>([</span><span class=o>-</span><span class=mi>1</span> <span class=k>for</span> <span class=n>c</span> <span class=ow>in</span> <span class=n>text</span>\u000a                                <span class=k>if</span> <span class=n>unicodedata</span><span class=o>.</span><span class=n>combining</span><span class=p>(</span><span class=n>c</span><span class=p>)])</span>\u000a    <span class=k>try</span><span class=p>:</span>\u000a        <span class=n>width</span> <span class=o>=</span> <span class=nb>sum</span><span class=p>([</span><span class=n>east_asian_widths</span><span class=p>[</span><span class=n>unicodedata</span><span class=o>.</span><span class=n>east_asian_width</span><span class=p>(</span><span class=n>c</span><span class=p>)]</span>\u000a                     <span class=k>for</span> <span class=n>c</span> <span class=ow>in</span> <span class=n>text</span><span class=p>])</span>\u000a    <span class=k>except</span> <span class=ne>AttributeError</span><span class=p>:</span>  <span class=c># east_asian_width() New in version 2.4.</span>\u000a        <span class=n>width</span> <span class=o>=</span> <span class=nb>len</span><span class=p>(</span><span class=n>text</span><span class=p>)</span>\u000a    <span class=k>return</span> <span class=n>width</span> <span class=o>+</span> <span class=n>combining_correction</span>\u000a\u000a\u000a<span class=k>class</span> <span class=nc>TextWrapper</span><span class=p>(</span><span class=n>textwrap</span><span class=o>.</span><span class=n>TextWrapper</span><span class=p>):</span>\u000a    <span class=sd>"""Custom subclass that uses a different word splitter."""</span>\u000a\u000a    <span class=k>def</span> <span class=nf>_wrap_chunks</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>chunks</span><span class=p>):</span>\u000a        <span class=sd>"""_wrap_chunks(chunks : [string]) -&gt; [string]</span>\u000a\u000a<span class=sd>        Original _wrap_chunks use len() to calculate width.</span>\u000a<span class=sd>        This method respect to wide/fullwidth characters for width adjustment.</span>\u000a<span class=sd>        """</span>\u000a        <span class=n>lines</span> <span class=o>=</span> <span class=p>[]</span>\u000a        <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>width</span> <span class=o>&lt;=</span> <span class=mi>0</span><span class=p>:</span>\u000a            <span class=k>raise</span> <span class=ne>ValueError</span><span class=p>(</span><span class=s>"invalid width </span><span class=si>%r</span><span class=s> (must be &gt; 0)"</span> <span class=o>%</span> <span class=bp>self</span><span class=o>.</span><span class=n>width</span><span class=p>)</span>\u000a\u000a        <span class=n>chunks</span><span class=o>.</span><span class=n>reverse</span><span class=p>()</span>\u000a\u000a        <span class=k>while</span> <span class=n>chunks</span><span class=p>:</span>\u000a            <span class=n>cur_line</span> <span class=o>=</span> <span class=p>[]</span>\u000a            <span class=n>cur_len</span> <span class=o>=</span> <span class=mi>0</span>\u000a\u000a            <span class=k>if</span> <span class=n>lines</span><span class=p>:</span>\u000a                <span class=n>indent</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>subsequent_indent</span>\u000a            <span class=k>else</span><span class=p>:</span>\u000a                <span class=n>indent</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>initial_indent</span>\u000a\u000a            <span class=n>width</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>width</span> <span class=o>-</span> <span class=n>column_width</span><span class=p>(</span><span class=n>indent</span><span class=p>)</span>\u000a\u000a            <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>drop_whitespace</span> <span class=ow>and</span> <span class=n>chunks</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span><span class=o>.</span><span class=n>strip</span><span class=p>()</span> <span class=o>==</span> <span class=s>''</span> <span class=ow>and</span> <span class=n>lines</span><span class=p>:</span>\u000a                <span class=k>del</span> <span class=n>chunks</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span>\u000a\u000a            <span class=k>while</span> <span class=n>chunks</span><span class=p>:</span>\u000a                <span class=n>l</span> <span class=o>=</span> <span class=n>column_width</span><span class=p>(</span><span class=n>chunks</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>])</span>\u000a\u000a                <span class=k>if</span> <span class=n>cur_len</span> <span class=o>+</span> <span class=n>l</span> <span class=o>&lt;=</span> <span class=n>width</span><span class=p>:</span>\u000a                    <span class=n>cur_line</span><span class=o>.</span><span class=n>append</span><span class=p>(</span><span class=n>chunks</span><span class=o>.</span><span class=n>pop</span><span class=p>())</span>\u000a                    <span class=n>cur_len</span> <span class=o>+=</span> <span class=n>l</span>\u000a\u000a                <span class=k>else</span><span class=p>:</span>\u000a                    <span class=k>break</span>\u000a\u000a            <span class=k>if</span> <span class=n>chunks</span> <span class=ow>and</span> <span class=n>column_width</span><span class=p>(</span><span class=n>chunks</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>])</span> <span class=o>&gt;</span> <span class=n>width</span><span class=p>:</span>\u000a                <span class=bp>self</span><span class=o>.</span><span class=n>_handle_long_word</span><span class=p>(</span><span class=n>chunks</span><span class=p>,</span> <span class=n>cur_line</span><span class=p>,</span> <span class=n>cur_len</span><span class=p>,</span> <span class=n>width</span><span class=p>)</span>\u000a\u000a            <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>drop_whitespace</span> <span class=ow>and</span> <span class=n>cur_line</span> <span class=ow>and</span> <span class=n>cur_line</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span><span class=o>.</span><span class=n>strip</span><span class=p>()</span> <span class=o>==</span> <span class=s>''</span><span class=p>:</span>\u000a                <span class=k>del</span> <span class=n>cur_line</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span>\u000a\u000a            <span class=k>if</span> <span class=n>cur_line</span><span class=p>:</span>\u000a                <span class=n>lines</span><span class=o>.</span><span class=n>append</span><span class=p>(</span><span class=n>indent</span> <span class=o>+</span> <span class=s>''</span><span class=o>.</span><span class=n>join</span><span class=p>(</span><span class=n>cur_line</span><span class=p>))</span>\u000a\u000a        <span class=k>return</span> <span class=n>lines</span>\u000a\u000a    <span class=k>def</span> <span class=nf>_break_word</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>word</span><span class=p>,</span> <span class=n>space_left</span><span class=p>):</span>\u000a        <span class=sd>"""_break_word(word : string, space_left : int) -&gt; (string, string)</span>\u000a\u000a<span class=sd>        Break line by unicode width instead of len(word).</span>\u000a<span class=sd>        """</span>\u000a        <span class=n>total</span> <span class=o>=</span> <span class=mi>0</span>\u000a        <span class=k>for</span> <span class=n>i</span><span class=p>,</span><span class=n>c</span> <span class=ow>in</span> <span class=nb>enumerate</span><span class=p>(</span><span class=n>word</span><span class=p>):</span>\u000a            <span class=n>total</span> <span class=o>+=</span> <span class=n>column_width</span><span class=p>(</span><span class=n>c</span><span class=p>)</span>\u000a            <span class=k>if</span> <span class=n>total</span> <span class=o>&gt;</span> <span class=n>space_left</span><span class=p>:</span>\u000a                <span class=k>return</span> <span class=n>word</span><span class=p>[:</span><span class=n>i</span><span class=o>-</span><span class=mi>1</span><span class=p>],</span> <span class=n>word</span><span class=p>[</span><span class=n>i</span><span class=o>-</span><span class=mi>1</span><span class=p>:]</span>\u000a        <span class=k>return</span> <span class=n>word</span><span class=p>,</span> <span class=s>''</span>\u000a\u000a    <span class=k>def</span> <span class=nf>_split</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>text</span><span class=p>):</span>\u000a        <span class=sd>"""_split(text : string) -&gt; [string]</span>\u000a\u000a<span class=sd>        Override original method that only split by 'wordsep_re'.</span>\u000a<span class=sd>        This '_split' split wide-characters into chunk by one character.</span>\u000a<span class=sd>        """</span>\u000a        <span class=n>split</span> <span class=o>=</span> <span class=k>lambda</span> <span class=n>t</span><span class=p>:</span> <span class=n>textwrap</span><span class=o>.</span><span class=n>TextWrapper</span><span class=o>.</span><span class=n>_split</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>t</span><span class=p>)</span>\u000a        <span class=n>chunks</span> <span class=o>=</span> <span class=p>[]</span>\u000a        <span class=k>for</span> <span class=n>chunk</span> <span class=ow>in</span> <span class=n>split</span><span class=p>(</span><span class=n>text</span><span class=p>):</span>\u000a            <span class=k>for</span> <span class=n>w</span><span class=p>,</span> <span class=n>g</span> <span class=ow>in</span> <span class=n>groupby</span><span class=p>(</span><span class=n>chunk</span><span class=p>,</span> <span class=n>column_width</span><span class=p>):</span>\u000a                <span class=k>if</span> <span class=n>w</span> <span class=o>==</span> <span class=mi>1</span><span class=p>:</span>\u000a                    <span class=n>chunks</span><span class=o>.</span><span class=n>extend</span><span class=p>(</span><span class=n>split</span><span class=p>(</span><span class=s>''</span><span class=o>.</span><span class=n>join</span><span class=p>(</span><span class=n>g</span><span class=p>)))</span>\u000a                <span class=k>else</span><span class=p>:</span>\u000a                    <span class=n>chunks</span><span class=o>.</span><span class=n>extend</span><span class=p>(</span><span class=nb>list</span><span class=p>(</span><span class=n>g</span><span class=p>))</span>\u000a        <span class=k>return</span> <span class=n>chunks</span>\u000a\u000a    <span class=k>def</span> <span class=nf>_handle_long_word</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>reversed_chunks</span><span class=p>,</span> <span class=n>cur_line</span><span class=p>,</span> <span class=n>cur_len</span><span class=p>,</span> <span class=n>width</span><span class=p>):</span>\u000a        <span class=sd>"""_handle_long_word(chunks : [string],</span>\u000a<span class=sd>                             cur_line : [string],</span>\u000a<span class=sd>                             cur_len : int, width : int)</span>\u000a\u000a<span class=sd>        Override original method for using self._break_word() instead of slice.</span>\u000a<span class=sd>        """</span>\u000a        <span class=n>space_left</span> <span class=o>=</span> <span class=nb>max</span><span class=p>(</span><span class=n>width</span> <span class=o>-</span> <span class=n>cur_len</span><span class=p>,</span> <span class=mi>1</span><span class=p>)</span>\u000a        <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>break_long_words</span><span class=p>:</span>\u000a            <span class=n>l</span><span class=p>,</span> <span class=n>r</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>_break_word</span><span class=p>(</span><span class=n>reversed_chunks</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>],</span> <span class=n>space_left</span><span class=p>)</span>\u000a            <span class=n>cur_line</span><span class=o>.</span><span class=n>append</span><span class=p>(</span><span class=n>l</span><span class=p>)</span>\u000a            <span class=n>reversed_chunks</span><span class=p>[</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span> <span class=o>=</span> <span class=n>r</span>\u000a\u000a        <span class=k>elif</span> <span class=ow>not</span> <span class=n>cur_line</span><span class=p>:</span>\u000a            <span class=n>cur_line</span><span class=o>.</span><span class=n>append</span><span class=p>(</span><span class=n>reversed_chunks</span><span class=o>.</span><span class=n>pop</span><span class=p>())</span>\u000a\u000a\u000a<span class=n>MAXWIDTH</span> <span class=o>=</span> <span class=mi>70</span>\u000a\u000a\u000a<span class=k>def</span> <span class=nf>fw_wrap</span><span class=p>(</span><span class=n>text</span><span class=p>,</span> <span class=n>width</span><span class=o>=</span><span class=n>MAXWIDTH</span><span class=p>,</span> <span class=o>**</span><span class=n>kwargs</span><span class=p>):</span>\u000a    <span class=n>w</span> <span class=o>=</span> <span class=n>TextWrapper</span><span class=p>(</span><span class=n>width</span><span class=o>=</span><span class=n>width</span><span class=p>,</span> <span class=o>**</span><span class=n>kwargs</span><span class=p>)</span>\u000a    <span class=k>return</span> <span class=n>w</span><span class=o>.</span><span class=n>wrap</span><span class=p>(</span><span class=n>text</span><span class=p>)</span>\u000a</pre></div>\u000a</div>\u000a<p>\u3068\u3044\u3046\u3053\u3068\u3067Sphinx\u306e\u5b9f\u88c5\u3092\u5dee\u3057\u66ff\u307e\u3057\u305f\u000a<a class="reference external" href=https://bitbucket.org/birkenfeld/sphinx/commits/9869f4e>https://bitbucket.org/birkenfeld/sphinx/commits/9869f4e</a> \u3002\u000a\u3053\u3093\u306a\u611f\u3058\u3067Sphinx\u306e\u5b9f\u88c5\u30fb\u6539\u5584\u3057\u3066\u308b\u3088\u3001\u3063\u3066\u3053\u3068\u3067\u3002</p>\u000a</div>\u000a
p9
sS'unique_id'
p10
g7
sS'title'
p11
V2013/02/16 Python\u306etextwrap.wrap()\u304c\u65e5\u672c\u8a9e\u3067\u5d29\u308c\u308b\u554f\u984c
p12
s.