:date: 2016-09-12 18:20
:tags: python

=================================================================
Expert Python Programming Second Edition の目次の和訳
=================================================================

Michał Jaworski, Tarek Ziadé 著の Expert Python Programming Second Edition の目次を和訳しました。Pythonの初心者向けではなく、何かの言語(Python, Ruby, Perl, ...)を理解している人がPythonを取り巻く開発環境、作法などを理解するのにとても良い本だと思います。

本は以下から購入できます。

* `PACKT <https://www.packtpub.com/application-development/expert-python-programming-second-edition>`_ (紙、PDF、ePub、Mobi）
* `Amazon <http://amzn.to/2c1Tea3>`_ (紙、Kindle)

PACKTのサイトでは各章、全セクションの `冒頭サンプルを読めます`_ 。

.. _冒頭サンプルを読めます: https://www.packtpub.com/mapt/book/Application%20Development/9781785886850


自分はPACKTで購入して、紙の本とPDF/ePub/Mobiとのセット購入で$44.99でした。
紙の本はインドでオンデマンド印刷されて10日くらいで手元に届きました。

目次は `PACKT`_ のページにある ``Read More`` をクリックすると表示されます。
この目次を和訳しました。 :doc:`/blog/2009/10/680/index` と比べると、Pythonのバージョンが2から3に更新された他に、周辺ツールやフローについての内容が今風なものに置き換わっていますね。

以下、公開されている目次の翻訳です。  **(新規)** と付けたセクションは、第1版にはなかったか、あっても異なるセクション名だったものです。 **(新規)** と付けていないセクションについても、Python3対応等で多くの部分が更新されています。



エキスパートPythonプログラミング 第2版
=======================================

.. contents:: 目次
   :local:


1章: Pythonの現状 **(新規)**
-------------------------------------

* 私たちは今どこに居てこれからどこに向かっていくのか? **(新規)**
* なぜ、どのようにPythonは変わるのか? **(新規)**
* 変更を追いかけよう – PEP ドキュメント **(新規)**
* 本書執筆時点でのPython3利用状況 **(新規)**
* Python2と3の主な違い **(新規)**
* CPythonだけじゃない **(更新)**
* 今どきのPython開発手法 **(新規)**
* アプリケーションレベルでのPython環境の分離 **(新規)**
* システムレベルでの環境の分離 **(新規)**
* 著名な生産性を向上するツール **(新規)**
* 有用な情報元 **(新規)**
* まとめ


2章: 構文ベストプラクティス - クラス以外
-------------------------------------------

* Pythonの組み込み型 **(新規)**
* 高度な文法 **(新規)**
* あなたが多分また知らない文法 **(新規)**
* まとめ


3章: 構文ベストプラクティス - クラスの世界
---------------------------------------------

* 組み込み型のサブクラス化
* スーパークラスからメソッドへのアクセス
* 高度な属性アクセスパターン **(新規)**
* メタプログラミング
* まとめ


4章: 良い名前の選択
--------------------

* PEP 8 と命名規則のベストプラクティス
* 命名規則のスタイル
* 名前付けガイド
* 引数のベストプラクティス
* クラス名
* モジュールメイトパッケージ名
* 役に立つツール
* まとめ


5章: パッケージを作る
------------------------

* パッケージを作る **(新規)**
* 名前空間パッケージ **(新規)**
* パッケージのアップロード **(新規)**
* 単体実行可能なファイルを作る **(新規)**
* まとめ

6章: コードをデプロイする **(新規)**
--------------------------------------

* The Twelve-Factor App **(新規)**
* Fabricを用いたデプロイの自動化 **(新規)**
* 独自のパッケージインデックスやミラーを用意する **(新規)**
* 一般的な慣習と実践 **(新規)**
* 動作の追跡とモニタリング **(新規)**
* まとめ

7章: 別言語で作るPython拡張 **(新規)**
----------------------------------------

* 別言語といえば... C or C++ **(新規)**
* なぜ拡張を使いたいのだろう **(新規)**
* 拡張を書く **(新規)**
* 挑戦 **(新規)**
* 拡張を使わずに動的ライブラリと接続する **(新規)**
* まとめ

8章: コードの管理
------------------

* バージョン管理システム **(大幅更新: gitを紹介)**
* 常時結合 **(大幅更新: jenkinsを紹介)**
* まとめ


9章: プロジェクトの文書化
----------------------------------

* テクニカルライティングの7つのルール
* reStructuredText 入門
* ドキュメントをビルドする
* 書類を作成する
* まとめ


10章: テスト駆動開発
---------------------

* テストをしていない人へ
* テストをしている人へ **(大幅更新: pytest加筆, tox紹介)**
* まとめ


11章: 最適化: 一般原則とプロファイリングテクニック
---------------------------------------------------

* 3つのルール
* 最適化戦略
* ボトルネックを見つける **(大幅更新: 新しいツール紹介)**
* まとめ



12章: 最適化: いくつかの強力な解決方法
--------------------------------------------

* 複雑さを減らす
* シンプルにする
* collectionsを使う **(新規)**
* アーキテクチャを変更する **(新規)**
* キャッシュ
* まとめ


13章: 並列実行 **(新規)**
-------------------------------

* なぜ並列実行なのか? **(新規)**
* マルチスレッドを使う **(新規)**
* マルチプロセスを使う **(新規)**
* 非同期プログラミング **(新規)**
* まとめ

14章: Pythonのためのデザインパターン
--------------------------------------

* 生成に関するパターン
* 構造に関するパターン
* 振る舞いに関するパターン
* まとめ


